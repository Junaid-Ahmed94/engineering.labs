name: "Run training"

# Trigger the workflow on push for the master branch and on any PR
on:
  push:
    branches: [master]
  pull_request:

jobs:
  train:
    name: Train
    runs-on: ubuntu-latest
    steps:
      - name: Checkout commit
        uses: actions/checkout@v2
      - name: Setup Python 3.7
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Configure GCP access
        uses: actions-hub/gcloud@master
        env:
          PROJECT_ID: engineeringlab
          APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        with:
          args: info
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Configure Docker
        uses: actions-hub/gcloud@master
        env:
          PROJECT_ID: engineeringlab
          APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        with:
          args: auth configure-docker gcr.io --quiet
      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GCR_JSON_KEY }}
      - name: Build and push training node
        uses: docker/build-push-action@v2
        with:
          context: ./Lab1_Operationalizing_Pytorch_with_Mlflow/src/bert-classifier
          file: ./Lab1_Operationalizing_Pytorch_with_Mlflow/src/bert-classifier/Dockerfile-trainer
          tags: gcr.io/engineeringlab/trainer:${{ github.sha }}
          build-args: |
            GCP_CREDS_JSON_BASE64=${{ secrets.GCP_CREDS_JSON_BASE64 }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: true
      - name: Start training node
        uses: actions-hub/gcloud@master
        env:
          PROJECT_ID: engineeringlab
          APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        with:
          args: |
            compute instances start --zone us-east1-b compute-1
      - name: Sleep for 15 seconds
        uses: jakejarvis/wait-action@master
        with:
          time: '15s'
      - name: Upload training script
        uses: actions-hub/gcloud@master
        env:
          PROJECT_ID: engineeringlab
          APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        with:
          args: |
            compute scp --zone us-east1-b ./Lab1_Operationalizing_Pytorch_with_Mlflow/src/bert-classifier/train.sh compute-1:/root
      - name: Run proper training
        id: run_training
        uses: actions-hub/gcloud@master
        env:
          PROJECT_ID: engineeringlab
          APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          MLFLOW_TRACKING_URI: http://35.185.111.8:5000
        with:
          args: |
            compute ssh --zone us-east1-b compute-1 -- "bash /root/train.sh ${MLFLOW_TRACKING_URI} ${GITHUB_SHA}
      - name: Stop training node
        uses: actions-hub/gcloud@master
        if: ${{ always() }}
        env:
          PROJECT_ID: engineeringlab
          APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        with:
          args: |
            compute instances stop --zone us-east1-b compute-1
      - name: Build and push Torchserve image
        uses: docker/build-push-action@v2
        with:
          context: ./Lab1_Operationalizing_Pytorch_with_Mlflow/src/bert-classifier
          file: ./Lab1_Operationalizing_Pytorch_with_Mlflow/src/bert-classifier/Dockerfile-torchserve
          tags: gcr.io/engineeringlab/torchserve:${{ steps.run_training.outputs.serve_image_tag }}
          build-args: |
            GCP_CREDS_JSON_BASE64=${{ secrets.GCP_CREDS_JSON_BASE64 }}
            MODEL_NAME=${{ steps.run_training.outputs.model_name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: true
      - name: Create Cloud Run service name
        run: echo ::set-output name=service_name::$(echo ${{ steps.run_training.outputs.serve_image_tag }} |  tr '[:upper:]' '[:lower:]')
        id: prepare_service_name
      - name: Deploy to Google Cloud Run
        uses: actions-hub/gcloud@master
        env:
          PROJECT_ID: engineeringlab
          APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
        with:
          args: |
            run deploy ${{ steps.prepare_service_name.outputs.service_name }} --image gcr.io/engineeringlab/torchserve:${{ steps.run_training.outputs.serve_image_tag }} --platform managed --port 8080 --allow-unauthenticated --memory 2G --cpu 2 --region us-central1 --labels=model=${{ steps.prepare_service_name.outputs.service_name }}
